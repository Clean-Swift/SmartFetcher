//
//  DetailViewController.swift
//  SmartFetcher
//
//  Created by Raymond Law on 9/1/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Display logic

protocol DetailDisplayLogic: class
{
  func displayEvent(viewModel: Detail.ShowEvent.ViewModel)
}

// MARK: - View controller

class DetailViewController: UIViewController, DetailDisplayLogic
{
  var interactor: DetailBusinessLogic?
  var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
  
  // MARK: - Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: - Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailInteractor()
    let presenter = DetailPresenter()
    let router = DetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: - Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    showEvent()
  }
  
  // MARK: - Show event
  
  @IBOutlet weak var detailDescriptionLabel: UILabel!
  
  func showEvent()
  {
    let request = Detail.ShowEvent.Request()
    interactor?.showEvent(request: request)
  }
  
  func displayEvent(viewModel: Detail.ShowEvent.ViewModel)
  {
    detailDescriptionLabel.text = viewModel.event
  }
}
