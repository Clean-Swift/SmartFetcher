//
//  MasterViewController.swift
//  SmartFetcher
//
//  Created by Raymond Law on 9/1/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

// MARK: - Display logic

protocol MasterDisplayLogic: class
{
  // MARK: CRUD operations
  func displayFetchedEvents(viewModel: Master.FetchEvents.ViewModel)
  func displayFetchedEventAndConfigureCell(viewModel: Master.FetchEventAndConfigureCell.ViewModel)
  func displayCreatedEvent(viewModel: Master.CreateEvent.ViewModel)
  func displayDeletedEvent(viewModel: Master.DeleteEvent.ViewModel)
  // MARK: Event update lifecycle
  func displayStartEventUpdates(viewModel: Master.StartEventUpdates.ViewModel)
  func displayStopEventUpdates(viewModel: Master.StopEventUpdates.ViewModel)
  // MARK: Event section updates
  func displayInsertedSection(section: IndexSet)
  func displayDeletedSection(section: IndexSet)
  func displayUpdatedSection(section: IndexSet)
  func displayMovedSection(from: IndexSet, to: IndexSet)
  // MARK: Event row updates
  func displayInsertedRowAt(row: IndexPath)
  func displayDeletedRowAt(row: IndexPath)
  func displayUpdatedRowAt(row: IndexPath, withDisplayedEvent displayedEvent: Master.DisplayedEvent)
  func displayMovedRow(from: IndexPath, to: IndexPath, withDisplayedEvent displayedEvent: Master.DisplayedEvent)
}

// MARK: - View controller

class MasterViewController: UITableViewController, MasterDisplayLogic
{
  var interactor: MasterBusinessLogic?
  var router: (NSObjectProtocol & MasterRoutingLogic & MasterDataPassing)?
  
  // MARK: - Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: - Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MasterInteractor()
    let presenter = MasterPresenter()
    let router = MasterRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: - Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configureNavigationBarButtons()
    fetchEvents()
  }
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    clearsSelectionOnViewWillAppear = splitViewController!.isCollapsed
    startEventUpdates()
  }
  
  override func viewWillDisappear(_ animated: Bool)
  {
    super.viewWillDisappear(animated)
    stopEventUpdates()
  }
  
  // MARK: - Navigation bar
  
  func configureNavigationBarButtons()
  {
    navigationItem.leftBarButtonItem = editButtonItem
    let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTapped(_:)))
    navigationItem.rightBarButtonItem = addButton
  }
  
  // MARK: - Table View
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    let request = Master.EventCount.Request()
    return interactor!.count(request: request)
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
    
    // NOTE: Use only one of the following
    // 1. Normal VIP Cycle
    //fetchEventAndConfigureCell(cell, at: indexPath)
    // 2. Closure
    let displayedEvent = fetchEventAndReturn(at: indexPath)
    configureCell(cell, withDisplayedEvent: displayedEvent)
    // 3. Function return value
    //fetchEventWithClosure(at: indexPath) { (displayedEvent) in
    //  self.configureCell(cell, withDisplayedEvent: displayedEvent)
    //}
    
    return cell
  }
  
  override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool
  {
    return true
  }
  
  override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
  {
    if editingStyle == .delete {
      deleteEvent(at: indexPath)
    }
  }
  
  func configureCell(_ cell: UITableViewCell, withDisplayedEvent displayedEvent: Master.DisplayedEvent)
  {
    cell.textLabel!.text = displayedEvent.timestamp
  }
  
  // MARK: - CRUD operations
  
  // MARK: Fetch events
  
  func fetchEvents()
  {
    let request = Master.FetchEvents.Request()
    interactor?.fetchEvents(request: request)
  }
  
  func displayFetchedEvents(viewModel: Master.FetchEvents.ViewModel)
  {
    tableView.reloadData()
  }
  
  // MARK: Fetch event
  
  func fetchEventAndConfigureCell(_ cell: UITableViewCell, at indexPath: IndexPath)
  {
    let request = Master.FetchEventAndConfigureCell.Request(indexPath: indexPath, cell: cell)
    interactor?.fetchEventAndConfigureCell(request: request)
  }
  
  func displayFetchedEventAndConfigureCell(viewModel: Master.FetchEventAndConfigureCell.ViewModel)
  {
    configureCell(viewModel.cell!, withDisplayedEvent: viewModel.displayedEvent)
  }
  
  func fetchEventAndReturn(at indexPath: IndexPath) -> Master.DisplayedEvent
  {
    let request = Master.FetchEventAndReturn.Request(indexPath: indexPath)
    let displayedEvent = interactor?.fetchEventAndReturn(request: request)
    return displayedEvent!
  }
  
  func fetchEventWithClosure(at indexPath: IndexPath, resultHandler: @escaping (Master.DisplayedEvent) -> Void)
  {
    let request = Master.FetchEventWithClosure.Request(indexPath: indexPath, resultHandler: resultHandler)
    interactor?.fetchEventWithClosure(request: request)
  }
  
  // MARK: Create event
  
  func addButtonTapped(_ sender: Any)
  {
    createEvent()
  }
  
  func createEvent()
  {
    let request = Master.CreateEvent.Request(timestamp: Date())
    interactor?.createEvent(request: request)
  }
  
  func displayCreatedEvent(viewModel: Master.CreateEvent.ViewModel)
  {
    tableView.reloadData()
  }
  
  // MARK: Delete event
  
  func deleteEvent(at indexPath: IndexPath)
  {
    let request = Master.DeleteEvent.Request(indexPath: indexPath)
    interactor?.deleteEvent(request: request)
  }
  
  func displayDeletedEvent(viewModel: Master.DeleteEvent.ViewModel)
  {
    tableView.reloadData()
  }
}

// MARK: - NSFetchedResultsController

extension MasterViewController
{
  // MARK: Event update lifecycle
  
  func startEventUpdates()
  {
    let request = Master.StartEventUpdates.Request()
    interactor?.startEventUpdates(request: request)
  }
  
  func displayStartEventUpdates(viewModel: Master.StartEventUpdates.ViewModel)
  {
    tableView.beginUpdates()
  }
  
  func stopEventUpdates()
  {
    let request = Master.StopEventUpdates.Request()
    interactor?.stopEventUpdates(request: request)
  }
  
  func displayStopEventUpdates(viewModel: Master.StopEventUpdates.ViewModel)
  {
    tableView.endUpdates()
  }
  
  // MARK: Event section updates
  
  func displayInsertedSection(section: IndexSet)
  {
    tableView.insertSections(section, with: .fade)
  }
  
  func displayDeletedSection(section: IndexSet)
  {
    tableView.deleteSections(section, with: .fade)
  }
  
  func displayUpdatedSection(section: IndexSet)
  {
  }
  
  func displayMovedSection(from: IndexSet, to: IndexSet)
  {
  }
  
  // MARK: Event row updates
  
  func displayInsertedRowAt(row: IndexPath)
  {
    tableView.insertRows(at: [row], with: .fade)
  }
  
  func displayDeletedRowAt(row: IndexPath)
  {
    tableView.deleteRows(at: [row], with: .fade)
  }
  
  func displayUpdatedRowAt(row: IndexPath, withDisplayedEvent displayedEvent: Master.DisplayedEvent)
  {
    configureCell(tableView.cellForRow(at: row)!, withDisplayedEvent: displayedEvent)
  }
  
  func displayMovedRow(from: IndexPath, to: IndexPath, withDisplayedEvent displayedEvent: Master.DisplayedEvent)
  {
    configureCell(tableView.cellForRow(at: from)!, withDisplayedEvent: displayedEvent)
    tableView.moveRow(at: from, to: to)
  }
}
