//
//  MasterPresenter.swift
//  SmartFetcher
//
//  Created by Raymond Law on 9/1/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Presentation logic

protocol MasterPresentationLogic
{
  // MARK: CRUD operations
  func presentFetchedEvents(response: Master.FetchEvents.Response)
  func presentFetchedEventAndConfigureCell(response: Master.FetchEventAndConfigureCell.Response)
  func presentFetchedEventAndReturn(response: Master.FetchEventAndReturn.Response) -> Master.DisplayedEvent
  func presentFetchedEventWithClosure(response: Master.FetchEventWithClosure.Response)
  func presentCreatedEvent(response: Master.CreateEvent.Response)
  func presentDeletedEvent(response: Master.DeleteEvent.Response)
  // MARK: Event update lifecycle
  func presentStartEventUpdates(response: Master.StartEventUpdates.Response)
  func presentStopEventUpdates(response: Master.StopEventUpdates.Response)
  // MARK: Event section updates
  func presentInsertedSection(section: IndexSet)
  func presentDeletedSection(section: IndexSet)
  func presentUpdatedSection(section: IndexSet)
  func presentMovedSection(from: IndexSet, to: IndexSet)
  // MARK: Event row updates
  func presentInsertedRowAt(row: IndexPath)
  func presentDeletedRowAt(row: IndexPath)
  func presentUpdatedRowAt(row: IndexPath, withEvent event: Event)
  func presentMovedRow(from: IndexPath, to: IndexPath, withEvent event: Event)
}

// MARK: - Presenter

class MasterPresenter: MasterPresentationLogic
{
  weak var viewController: MasterDisplayLogic?
  
  // MARK: - CRUD operations
  
  // MARK: Fetch events
  
  func presentFetchedEvents(response: Master.FetchEvents.Response)
  {
    let displayedEvents = response.events.map { (event) -> Master.DisplayedEvent in
      formatEvent(event: event)!
    }
    
    let viewModel = Master.FetchEvents.ViewModel(displayedEvents: displayedEvents)
    viewController?.displayFetchedEvents(viewModel: viewModel)
  }
  
  // MARK: Fetch event
  
  func presentFetchedEventAndConfigureCell(response: Master.FetchEventAndConfigureCell.Response)
  {
    let displayedEvent = formatEvent(event: response.event)!
    
    let viewModel = Master.FetchEventAndConfigureCell.ViewModel(displayedEvent: displayedEvent, cell: response.cell)
    viewController?.displayFetchedEventAndConfigureCell(viewModel: viewModel)
  }
  
  func presentFetchedEventAndReturn(response: Master.FetchEventAndReturn.Response) -> Master.DisplayedEvent
  {
    let displayedEvent = formatEvent(event: response.event)!
    return displayedEvent
  }
  
  func presentFetchedEventWithClosure(response: Master.FetchEventWithClosure.Response)
  {
    let displayedEvent = formatEvent(event: response.event)!
    response.resultHandler(displayedEvent)
  }
  
  // MARK: Create event
  
  func presentCreatedEvent(response: Master.CreateEvent.Response)
  {
    let viewModel = Master.CreateEvent.ViewModel(displayedEvent: formatEvent(event: response.event))
    viewController?.displayCreatedEvent(viewModel: viewModel)
  }
  
  // MARK: Delete event
  
  func presentDeletedEvent(response: Master.DeleteEvent.Response)
  {
    let viewModel = Master.DeleteEvent.ViewModel()
    viewController?.displayDeletedEvent(viewModel: viewModel)
  }
  
  // MARK: - Format event
  
  func formatEvent(event: Event?) -> Master.DisplayedEvent?
  {
    guard let timestamp = event?.timestamp.description else {
      return nil
    }
    return Master.DisplayedEvent(timestamp: timestamp)
  }
}

// MARK: - NSFetchedResultsController

extension MasterPresenter
{
  // MARK: Event update lifecycle
  
  func presentStartEventUpdates(response: Master.StartEventUpdates.Response)
  {
    let viewModel = Master.StartEventUpdates.ViewModel()
    viewController?.displayStartEventUpdates(viewModel: viewModel)
  }
  
  func presentStopEventUpdates(response: Master.StopEventUpdates.Response)
  {
    let viewModel = Master.StopEventUpdates.ViewModel()
    viewController?.displayStopEventUpdates(viewModel: viewModel)
  }
  
  // MARK: Event section updates
  
  func presentInsertedSection(section: IndexSet)
  {
    viewController?.displayInsertedSection(section: section)
  }
  
  func presentDeletedSection(section: IndexSet)
  {
    viewController?.displayDeletedSection(section: section)
  }
  
  func presentUpdatedSection(section: IndexSet)
  {
    viewController?.displayUpdatedSection(section: section)
  }
  
  func presentMovedSection(from: IndexSet, to: IndexSet)
  {
    viewController?.displayMovedSection(from: from, to: to)
  }
  
  // MARK: Event row updates
  
  func presentInsertedRowAt(row: IndexPath)
  {
    viewController?.displayInsertedRowAt(row: row)
  }
  
  func presentDeletedRowAt(row: IndexPath)
  {
    viewController?.displayDeletedRowAt(row: row)
  }
  
  func presentUpdatedRowAt(row: IndexPath, withEvent event: Event)
  {
    let displayedEvent = formatEvent(event: event)
    viewController?.displayUpdatedRowAt(row: row, withDisplayedEvent: displayedEvent!)
  }
  
  func presentMovedRow(from: IndexPath, to: IndexPath, withEvent event: Event)
  {
    let displayedEvent = formatEvent(event: event)
    viewController?.displayMovedRow(from: from, to: to, withDisplayedEvent: displayedEvent!)
  }
}
