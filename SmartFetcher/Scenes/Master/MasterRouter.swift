//
//  MasterRouter.swift
//  SmartFetcher
//
//  Created by Raymond Law on 9/1/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Routing logic

@objc protocol MasterRoutingLogic
{
  func routeToDetail(segue: UIStoryboardSegue?)
}

protocol MasterDataPassing
{
  var dataStore: MasterDataStore? { get }
}

// MARK: - Router

class MasterRouter: NSObject, MasterRoutingLogic, MasterDataPassing
{
  weak var viewController: MasterViewController?
  var dataStore: MasterDataStore?
  
  // MARK: Routing
  
  func routeToDetail(segue: UIStoryboardSegue?)
  {
    if let segue = segue {
      let destinationVC = (segue.destination as! UINavigationController).topViewController as! DetailViewController
      var destinationDS = destinationVC.router!.dataStore!
      passDataToDetail(source: dataStore!, destination: &destinationDS)
      navigateToDetail(source: viewController!, destination: destinationVC)
    } else {
      let storyboard = UIStoryboard(name: "Main", bundle: nil)
      let destinationVC = storyboard.instantiateViewController(withIdentifier: "DetailViewController") as! DetailViewController
      var destinationDS = destinationVC.router!.dataStore!
      passDataToDetail(source: dataStore!, destination: &destinationDS)
      navigateToDetail(source: viewController!, destination: destinationVC)
    }
  }

  // MARK: Navigation
  
  func navigateToDetail(source: MasterViewController, destination: DetailViewController)
  {
    destination.navigationItem.leftBarButtonItem = source.splitViewController?.displayModeButtonItem
    destination.navigationItem.leftItemsSupplementBackButton = true
  }
  
  // MARK: Passing data
  
  func passDataToDetail(source: MasterDataStore, destination: inout DetailDataStore)
  {
    if let indexPath = viewController?.tableView.indexPathForSelectedRow {
      let event = Master.eventWorker.show(at: indexPath)
      destination.event = event
    }
  }
}
